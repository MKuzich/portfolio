{"version":3,"file":"static/js/225.65c1144a.chunk.js","mappings":"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","sources":["components/ProjectPoster/ProjectPoster.jsx","components/FilterButton/FilterButton.jsx","components/FilterPanel/FilterPanel.jsx","pages/Projects/Projects.jsx"],"sourcesContent":["import { Button, Box, Typography, Chip, Stack } from '@mui/material';\nimport { Link, useLocation } from 'react-router-dom';\n\nexport const ProjectPoster = ({ poster, name, id, tech }) => {\n  const location = useLocation();\n\n  return (\n    <Button\n      component={Link}\n      to={`/projects/${id}`}\n      state={{ from: location }}\n      sx={{\n        position: 'relative',\n        backgroundImage: `url(${poster})`,\n        backgroundRepeat: 'no-repeat',\n        backgroundSize: 'cover',\n        backgroundPosition: 'top left',\n        borderRadius: 4,\n        height: '100%',\n        width: '100%',\n        p: 0,\n        overflow: 'hidden',\n        filter: 'grayscale(1)',\n        '&': { transition: 'all 500ms' },\n        '&:hover': {\n          boxShadow: '0px 0px 35px -7px rgba(255,255,255,0.5)',\n          filter: 'grayscale(0)',\n        },\n        '&:hover > div': {\n          opacity: 1,\n          bottom: 0,\n        },\n      }}\n    >\n      <Box\n        sx={{\n          position: 'absolute',\n          right: 0,\n          bottom: '-300px',\n          width: '100%',\n          p: 2,\n          display: 'flex',\n          flexDirection: 'column',\n          backgroundColor: 'rgba(255,255,255,0.7)',\n          opacity: 0,\n          transition: 'all 500ms',\n        }}\n      >\n        <Typography variant=\"titleDesription\">{name}</Typography>\n        <Stack direction=\"row\" flexWrap=\"wrap\" gap={1}>\n          {tech.map(itm => (\n            <Chip\n              sx={{ color: '#fff', cursor: 'pointer' }}\n              key={name + itm}\n              color=\"secondary\"\n              size=\"small\"\n              label={itm}\n            />\n          ))}\n        </Stack>\n      </Box>\n    </Button>\n  );\n};\n","import { Button } from '@mui/material';\n\nexport const FilterButton = ({ text, selectedFilter, onTechBtnClick }) => {\n  return (\n    <Button\n      sx={{\n        borderRadius: 2,\n        px: 2,\n        color: '#fff',\n        backgroundColor: selectedFilter ? '#8bc34a' : '#484848',\n        '&': { transition: 'background-color 300ms' },\n        '&:hover': { backgroundColor: '#8bc34a' },\n      }}\n      onClick={() => onTechBtnClick(text)}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { Stack, Switch, Typography } from '@mui/material';\nimport { projects } from 'data/projects';\nimport { FilterButton } from 'components/FilterButton/FilterButton';\n\nconst projList = [\n  ...new Set(\n    projects.reduce((acc, { tech }) => {\n      return [...acc, ...tech];\n    }, [])\n  ),\n];\n\nexport const FilterPanel = ({\n  selectedFilter,\n  setSelectedFilter,\n  identityToggler,\n  setIdentityToggler,\n}) => {\n  const onAllBtnClick = () => {\n    setSelectedFilter([]);\n  };\n\n  const onTechBtnClick = name => {\n    if (selectedFilter.includes(name)) {\n      setSelectedFilter(selectedFilter.filter(i => i !== name));\n      return;\n    }\n    setSelectedFilter([...selectedFilter, name]);\n  };\n\n  const onTogglerClickHandler = () => {\n    setIdentityToggler(!identityToggler);\n  };\n\n  return (\n    <Stack direction=\"row\" flexWrap=\"wrap\" gap={1} mb={10}>\n      <FilterButton\n        selectedFilter={selectedFilter.length === 0}\n        text=\"All\"\n        onClick={onAllBtnClick}\n      />\n      {projList.map(tech => (\n        <FilterButton\n          key={'filter' + tech}\n          selectedFilter={selectedFilter.some(i => i === tech)}\n          text={tech}\n          onTechBtnClick={onTechBtnClick}\n        />\n      ))}\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Switch\n          defaultChecked={identityToggler}\n          onChange={onTogglerClickHandler}\n          sx={{\n            '& .MuiSwitch-switchBase': {\n              transitionDuration: '300ms',\n              '&.Mui-checked': {\n                color: '#fff',\n                '& + .MuiSwitch-track': {\n                  backgroundColor: '#8bc34a',\n                  opacity: 1,\n                  border: 0,\n                },\n              },\n              '&.Mui-focusVisible .MuiSwitch-thumb': {},\n            },\n            '& .MuiSwitch-thumb': {},\n            '& .MuiSwitch-track': {\n              backgroundColor: '#484848',\n              opacity: 1,\n            },\n          }}\n        />\n        <Typography>Exact match</Typography>\n      </Stack>\n    </Stack>\n  );\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Container, Grid } from '@mui/material';\nimport { projects } from 'data/projects';\nimport { ProjectPoster } from 'components/ProjectPoster/ProjectPoster';\nimport { BackButton } from 'components/BackButton/BackButton';\nimport { FilterPanel } from 'components/FilterPanel/FilterPanel';\n\nconst Projects = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filter = useMemo(\n    () => searchParams.get('filter')?.split(',') ?? [],\n    [searchParams]\n  );\n  const toggler = useMemo(\n    () => (searchParams.get('exact') === 'true' ? true : false),\n    [searchParams]\n  );\n  const [selectedFilter, setSelectedFilter] = useState(filter);\n\n  const [filteredProjects, setFilteredProjects] = useState(projects);\n  const [identityToggler, setIdentityToggler] = useState(toggler);\n\n  useEffect(() => {\n    console.log(' filter: ', filter);\n\n    console.log(' selectedFilter: ', selectedFilter);\n\n    console.log('identityToggler,', identityToggler);\n  }, [filter, identityToggler, selectedFilter]);\n\n  useEffect(() => {\n    if (selectedFilter.length === 0) {\n      return setFilteredProjects(projects);\n    }\n    setFilteredProjects(\n      projects.filter(({ tech }) => {\n        if (!identityToggler) {\n          return selectedFilter.some(i => tech.includes(i));\n        } else {\n          return selectedFilter.every(i => tech.includes(i));\n        }\n      })\n    );\n  }, [selectedFilter, identityToggler]);\n\n  useEffect(() => {\n    const filterParams = selectedFilter.join(',');\n    setSearchParams({ filter: filterParams, exact: identityToggler });\n  }, [identityToggler, selectedFilter, setSearchParams]);\n\n  return (\n    <section>\n      <BackButton />\n      <Container sx={{ py: 10 }}>\n        <FilterPanel\n          selectedFilter={selectedFilter}\n          setSelectedFilter={setSelectedFilter}\n          identityToggler={identityToggler}\n          setIdentityToggler={setIdentityToggler}\n        />\n        <Grid container spacing={3}>\n          {filteredProjects.map(({ id, name, poster, tech }, idx) => (\n            <Grid\n              key={name}\n              item\n              xxs={12}\n              sm={idx % 3 === 0 ? 12 : 6}\n              md={idx % 10 === 0 || idx % 10 === 6 ? 8 : 4}\n              sx={{ height: '350px' }}\n            >\n              <ProjectPoster poster={poster} name={name} id={id} tech={tech} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </section>\n  );\n};\nexport default Projects;\n"],"names":["ProjectPoster","poster","name","id","tech","location","useLocation","Button","component","Link","to","state","from","sx","position","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","borderRadius","height","width","p","overflow","filter","transition","boxShadow","opacity","bottom","Box","right","display","flexDirection","backgroundColor","Typography","variant","Stack","direction","flexWrap","gap","map","itm","Chip","color","cursor","size","label","FilterButton","text","selectedFilter","onTechBtnClick","px","onClick","projList","Set","projects","acc","FilterPanel","setSelectedFilter","identityToggler","setIdentityToggler","includes","i","mb","length","some","alignItems","Switch","defaultChecked","onChange","transitionDuration","border","useSearchParams","searchParams","setSearchParams","useMemo","get","split","toggler","useState","filteredProjects","setFilteredProjects","useEffect","console","log","every","filterParams","join","exact","BackButton","Container","py","Grid","container","spacing","idx","item","xxs","sm","md"],"sourceRoot":""}