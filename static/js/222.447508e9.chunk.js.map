{"version":3,"file":"static/js/222.447508e9.chunk.js","mappings":"4UAGaA,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC5BC,GAAOC,EAAAA,EAAAA,GAAc,qBAC3B,OACE,UAACC,EAAA,EAAD,CAAOC,UAAU,MAAMC,WAAW,SAAlC,WACE,SAACC,EAAA,EAAD,UAAaN,KACb,SAACO,EAAA,EAAD,CACEC,UAAU,IACVC,KAAMV,EACNW,OAAO,SACPC,GAAI,CACFC,WAAY,EACZC,MAAO,OACP,IAAK,CAAEC,WAAY,eACnB,UAAW,CAAED,MAAO,WACpBE,cAAe,OATnB,UAYE,SAAC,MAAD,CAAgBC,KAAMf,EAAO,UAAY,aAIhD,ECwED,EArFgB,WACd,IAAQgB,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAkBE,EAAAA,EAAAA,UAChBC,EAAAA,EAAAA,MAAc,SAAAC,GAAO,OAAIA,EAAQC,KAAOL,CAAnB,KADhBI,GAAP,eAGA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAGEC,EAQEJ,EARFI,KACAC,EAOEL,EAPFK,KACAC,EAMEN,EANFM,YACAC,EAKEP,EALFO,UACAC,EAIER,EAJFQ,SACAC,EAGET,EAHFS,aACAC,EAEEV,EAFFU,aACAC,EACEX,EADFW,OAGF,OACE,gCACE,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,CAAWvB,GAAI,CAAEwB,GAAI,IAArB,SACGd,IACC,UAAClB,EAAA,EAAD,CAAOiC,IAAK,EAAZ,WACE,SAAC9B,EAAA,EAAD,CACE+B,QAAQ,WACR1B,GAAI,CACF2B,SAAU,CACRC,IAAK,SACLC,GAAI,SACJC,GAAI,UAEN5B,MAAO,QARX,SAWGY,KAEH,SAACtB,EAAA,EAAD,CAAOC,UAAU,MAAMsC,SAAS,OAAON,IAAK,EAA5C,SACGV,EAAKiB,KAAI,SAAAC,GAAG,OACX,SAACC,EAAA,EAAD,CACElC,GAAI,CAAEE,MAAO,QAEbA,MAAM,YACNiC,MAAOF,GAFFnB,EAAOmB,EAHH,OASf,SAACtC,EAAA,EAAD,UAAaqB,KACb,UAACrB,EAAA,EAAD,0BACcyC,EAAAA,EAAAA,GAAOhB,EAAc,gBAEnC,UAAC5B,EAAA,EAAD,WACGyB,IACC,SAAC9B,EAAD,CAAaC,KAAM6B,EAAW5B,KAAK,sBAEpC6B,IACC,SAAC/B,EAAD,CAAaC,KAAM8B,EAAU7B,KAAK,qBAEnC8B,IACC,SAAChC,EAAD,CAAaC,KAAM+B,EAAc9B,KAAK,4BAG1C,SAACgD,EAAA,EAAD,CACEC,QAAS,kBAAMzB,GAAYD,EAAlB,EACT2B,WAAW,SAAC,MAAD,IACXvC,GAAI,CACFwC,QAAS,OACTC,aAAc,EACdC,GAAI,EACJxC,MAAO,OACPyC,gBAAiB,UACjB,IAAK,CAAExC,WAAY,0BACnB,UAAW,CAAEwC,gBAAiB,YAVlC,0BAeA,SAAC,IAAD,CAAY/B,QAASA,EAASgC,QAASvB,WAMlD,C","sources":["components/ProjectLink/ProjectLink.jsx","pages/Project/Project.jsx"],"sourcesContent":["import { Typography, Stack, IconButton, useMediaQuery } from '@mui/material';\nimport { TbExternalLink } from 'react-icons/tb';\n\nexport const ProjectLink = ({ link, text }) => {\n  const isMd = useMediaQuery('(min-width:900px)');\n  return (\n    <Stack direction=\"row\" alignItems=\"center\">\n      <Typography>{text}</Typography>\n      <IconButton\n        component=\"a\"\n        href={link}\n        target=\"_blank\"\n        sx={{\n          flexShrink: 0,\n          color: '#fff',\n          '&': { transition: 'color 300ms' },\n          '&:hover': { color: '#8bc34a' },\n          verticalAlign: 'top',\n        }}\n      >\n        <TbExternalLink size={isMd ? '1.25rem' : '1rem'} />\n      </IconButton>\n    </Stack>\n  );\n};\n","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Typography, Stack, Chip, Button } from '@mui/material';\nimport FsLightbox from 'fslightbox-react';\nimport { format } from 'date-fns';\nimport { BsImage } from 'react-icons/bs';\n\nimport { projects } from 'data/projects';\nimport { BackButton } from '../../components/BackButton/BackButton';\nimport { ProjectLink } from 'components/ProjectLink/ProjectLink';\n\nconst Project = () => {\n  const { projectId } = useParams();\n  const [project] = useState(\n    projects.find(project => project.id === projectId)\n  );\n  const [toggler, setToggler] = useState(false);\n\n  const {\n    name,\n    tech,\n    description,\n    frontLink,\n    backLink,\n    deployedLink,\n    creationDate,\n    images,\n  } = project;\n\n  return (\n    <section>\n      <BackButton />\n      <Container sx={{ py: 10 }}>\n        {project && (\n          <Stack gap={7}>\n            <Typography\n              variant=\"homeLink\"\n              sx={{\n                fontSize: {\n                  xxs: '20vmin',\n                  xs: '15vmin',\n                  lg: '18vmin',\n                },\n                color: '#fff',\n              }}\n            >\n              {name}\n            </Typography>\n            <Stack direction=\"row\" flexWrap=\"wrap\" gap={1}>\n              {tech.map(itm => (\n                <Chip\n                  sx={{ color: '#fff' }}\n                  key={name + itm}\n                  color=\"secondary\"\n                  label={itm}\n                />\n              ))}\n            </Stack>\n            <Typography>{description}</Typography>\n            <Typography>\n              Created at {format(creationDate, 'dd MMM y')}\n            </Typography>\n            <Stack>\n              {frontLink && (\n                <ProjectLink link={frontLink} text=\"To front end repo\" />\n              )}\n              {backLink && (\n                <ProjectLink link={backLink} text=\"To back end repo\" />\n              )}\n              {deployedLink && (\n                <ProjectLink link={deployedLink} text=\"To deployed project\" />\n              )}\n            </Stack>\n            <Button\n              onClick={() => setToggler(!toggler)}\n              startIcon={<BsImage />}\n              sx={{\n                marginX: 'auto',\n                borderRadius: 2,\n                px: 2,\n                color: '#fff',\n                backgroundColor: '#484848',\n                '&': { transition: 'background-color 300ms' },\n                '&:hover': { backgroundColor: '#8bc34a' },\n              }}\n            >\n              Screenshots\n            </Button>\n            <FsLightbox toggler={toggler} sources={images} />\n          </Stack>\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default Project;\n"],"names":["ProjectLink","link","text","isMd","useMediaQuery","Stack","direction","alignItems","Typography","IconButton","component","href","target","sx","flexShrink","color","transition","verticalAlign","size","projectId","useParams","useState","projects","project","id","toggler","setToggler","name","tech","description","frontLink","backLink","deployedLink","creationDate","images","BackButton","Container","py","gap","variant","fontSize","xxs","xs","lg","flexWrap","map","itm","Chip","label","format","Button","onClick","startIcon","marginX","borderRadius","px","backgroundColor","sources"],"sourceRoot":""}