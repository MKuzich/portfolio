{"version":3,"file":"static/js/222.73294ecf.chunk.js","mappings":"kUAGaA,EAAc,SAAC,GAAoB,IAAlBC,EAAiB,EAAjBA,KAAMC,EAAW,EAAXA,KAC5BC,GAAOC,EAAAA,EAAAA,GAAc,qBAC3B,OACE,SAACC,EAAA,EAAD,CACEC,UAAU,IACVC,QAAQ,WACRC,KAAMP,EACNQ,OAAO,SACPC,SAAS,SAAC,MAAD,CAAgBC,KAAMR,EAAO,UAAY,SAClDS,MAAM,YACNC,GAAI,CACFC,WAAY,EACZ,IAAK,CAAEC,WAAY,eACnB,UAAW,CAAEH,MAAO,WACpBI,cAAe,SACfC,WAAY,UAZhB,SAeGf,GAGN,ECqED,EAlFgB,WACd,IAAQgB,GAAcC,EAAAA,EAAAA,MAAdD,UACR,GAAkBE,EAAAA,EAAAA,UAChBC,EAAAA,EAAAA,MAAc,SAAAC,GAAO,OAAIA,EAAQC,KAAOL,CAAnB,KADhBI,GAAP,eAGA,GAA8BF,EAAAA,EAAAA,WAAS,GAAvC,eAAOI,EAAP,KAAgBC,EAAhB,KAGEC,EAQEJ,EARFI,KACAC,EAOEL,EAPFK,KACAC,EAMEN,EANFM,YACAC,EAKEP,EALFO,UACAC,EAIER,EAJFQ,SACAC,EAGET,EAHFS,aACAC,EAEEV,EAFFU,aACAC,EACEX,EADFW,OAGF,OACE,gCACE,SAACC,EAAA,EAAD,KACA,SAACC,EAAA,EAAD,CAAWtB,GAAI,CAAEuB,GAAI,IAArB,SACGd,IACC,UAACe,EAAA,EAAD,CAAOC,IAAK,EAAZ,WACE,SAACC,EAAA,EAAD,CACEhC,QAAQ,WACRM,GAAI,CACF2B,SAAU,CACRC,IAAK,SACLC,GAAI,SACJC,GAAI,UAEN/B,MAAO,QARX,SAWGc,KAEH,SAACW,EAAA,EAAD,CAAOO,UAAU,MAAMC,SAAS,OAAOP,IAAK,EAA5C,SACGX,EAAKmB,KAAI,SAAAC,GAAG,OACX,SAACC,EAAA,EAAD,CACEnC,GAAI,CAAED,MAAO,QAEbA,MAAM,YACNqC,MAAOF,GAFFrB,EAAOqB,EAHH,OASf,SAACR,EAAA,EAAD,UAAaX,KACb,UAACW,EAAA,EAAD,0BACcW,EAAAA,EAAAA,GAAOlB,EAAc,iBAEnC,UAACK,EAAA,EAAD,CAAOO,UAAU,SAAS3B,WAAW,QAArC,WACE,UAACoB,EAAA,EAAD,CAAOO,UAAU,MAAMC,SAAS,OAAOP,IAAK,EAA5C,UACGT,IAAa,SAAC7B,EAAD,CAAaC,KAAM4B,EAAW3B,KAAK,cAChD4B,IAAY,SAAC9B,EAAD,CAAaC,KAAM6B,EAAU5B,KAAK,aAC9C6B,IACC,SAAC/B,EAAD,CAAaC,KAAM8B,EAAc7B,KAAK,iBAG1C,SAACG,EAAA,EAAD,CACE8C,QAAS,kBAAM1B,GAAYD,EAAlB,EACT4B,WAAW,SAAC,MAAD,IACX7C,QAAQ,YACRK,MAAM,YACNC,GAAI,CACFwC,GAAI,EACJC,aAAc,EACdC,GAAI,GARR,6BAeF,SAAC,IAAD,CAAY/B,QAASA,EAASgC,QAASvB,WAMlD,C","sources":["components/ProjectLink/ProjectLink.jsx","pages/Project/Project.jsx"],"sourcesContent":["import { Button, useMediaQuery } from '@mui/material';\nimport { TbExternalLink } from 'react-icons/tb';\n\nexport const ProjectLink = ({ link, text }) => {\n  const isMd = useMediaQuery('(min-width:900px)');\n  return (\n    <Button\n      component=\"a\"\n      variant=\"outlined\"\n      href={link}\n      target=\"_blank\"\n      endIcon={<TbExternalLink size={isMd ? '1.25rem' : '1rem'} />}\n      color=\"secondary\"\n      sx={{\n        flexShrink: 0,\n        '&': { transition: 'color 300ms' },\n        '&:hover': { color: '#8bc34a' },\n        verticalAlign: 'center',\n        alignItems: 'center',\n      }}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { useState } from 'react';\nimport { useParams } from 'react-router-dom';\nimport { Container, Typography, Stack, Chip, Button } from '@mui/material';\nimport FsLightbox from 'fslightbox-react';\nimport { format } from 'date-fns';\nimport { BsImage } from 'react-icons/bs';\n\nimport { projects } from 'data/projects';\nimport { BackButton } from '../../components/BackButton/BackButton';\nimport { ProjectLink } from 'components/ProjectLink/ProjectLink';\n\nconst Project = () => {\n  const { projectId } = useParams();\n  const [project] = useState(\n    projects.find(project => project.id === projectId)\n  );\n  const [toggler, setToggler] = useState(false);\n\n  const {\n    name,\n    tech,\n    description,\n    frontLink,\n    backLink,\n    deployedLink,\n    creationDate,\n    images,\n  } = project;\n\n  return (\n    <section>\n      <BackButton />\n      <Container sx={{ py: 10 }}>\n        {project && (\n          <Stack gap={7}>\n            <Typography\n              variant=\"homeLink\"\n              sx={{\n                fontSize: {\n                  xxs: '20vmin',\n                  xs: '15vmin',\n                  lg: '18vmin',\n                },\n                color: '#fff',\n              }}\n            >\n              {name}\n            </Typography>\n            <Stack direction=\"row\" flexWrap=\"wrap\" gap={1}>\n              {tech.map(itm => (\n                <Chip\n                  sx={{ color: '#fff' }}\n                  key={name + itm}\n                  color=\"secondary\"\n                  label={itm}\n                />\n              ))}\n            </Stack>\n            <Typography>{description}</Typography>\n            <Typography>\n              Created at {format(creationDate, 'dd MMMM y')}\n            </Typography>\n            <Stack direction=\"column\" alignItems=\"start\">\n              <Stack direction=\"row\" flexWrap=\"wrap\" gap={2}>\n                {frontLink && <ProjectLink link={frontLink} text=\"Front End\" />}\n                {backLink && <ProjectLink link={backLink} text=\"Back End\" />}\n                {deployedLink && (\n                  <ProjectLink link={deployedLink} text=\"Deployed\" />\n                )}\n              </Stack>\n              <Button\n                onClick={() => setToggler(!toggler)}\n                startIcon={<BsImage />}\n                variant=\"contained\"\n                color=\"secondary\"\n                sx={{\n                  mt: 4,\n                  borderRadius: 2,\n                  px: 2,\n                }}\n              >\n                Screenshots\n              </Button>\n            </Stack>\n\n            <FsLightbox toggler={toggler} sources={images} />\n          </Stack>\n        )}\n      </Container>\n    </section>\n  );\n};\n\nexport default Project;\n"],"names":["ProjectLink","link","text","isMd","useMediaQuery","Button","component","variant","href","target","endIcon","size","color","sx","flexShrink","transition","verticalAlign","alignItems","projectId","useParams","useState","projects","project","id","toggler","setToggler","name","tech","description","frontLink","backLink","deployedLink","creationDate","images","BackButton","Container","py","Stack","gap","Typography","fontSize","xxs","xs","lg","direction","flexWrap","map","itm","Chip","label","format","onClick","startIcon","mt","borderRadius","px","sources"],"sourceRoot":""}