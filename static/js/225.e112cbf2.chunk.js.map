{"version":3,"file":"static/js/225.e112cbf2.chunk.js","mappings":"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","sources":["components/ProjectPoster/ProjectPoster.jsx","components/FilterButton/FilterButton.jsx","components/FilterPanel/FilterPanel.jsx","pages/Projects/Projects.jsx"],"sourcesContent":["import { Button, Box, Typography, Chip, Stack } from '@mui/material';\nimport { Link, useLocation } from 'react-router-dom';\nimport { motion } from 'framer-motion';\n\nexport const ProjectPoster = ({ poster, name, id, tech }) => {\n  const location = useLocation();\n\n  return (\n    <motion.div\n      initial={{ opacity: 0 }}\n      whileInView={{ opacity: 1 }}\n      viewport={{ once: true }}\n      style={{ width: '100%', height: '100%' }}\n    >\n      <Button\n        component={Link}\n        to={`/projects/${id}`}\n        state={{ from: location }}\n        sx={{\n          position: 'relative',\n          backgroundImage: `url(${poster})`,\n          backgroundRepeat: 'no-repeat',\n          backgroundSize: 'cover',\n          backgroundPosition: 'top left',\n          borderRadius: 4,\n          height: '100%',\n          width: '100%',\n          p: 0,\n          overflow: 'hidden',\n          filter: 'grayscale(1)',\n          '&': { transition: 'all 500ms' },\n          '&:hover': {\n            boxShadow: '0px 0px 35px -7px rgba(255,255,255,0.5)',\n            filter: 'grayscale(0)',\n          },\n          '&:hover > div': {\n            opacity: 1,\n            bottom: 0,\n          },\n        }}\n      >\n        <Box\n          sx={{\n            position: 'absolute',\n            right: 0,\n            bottom: '-300px',\n            width: '100%',\n            p: 2,\n            display: 'flex',\n            flexDirection: 'column',\n            backgroundColor: 'rgba(255,255,255,0.7)',\n            opacity: 0,\n            transition: 'all 500ms',\n          }}\n        >\n          <Typography variant=\"titleDesription\">{name}</Typography>\n          <Stack direction=\"row\" flexWrap=\"wrap\" gap={1}>\n            {tech.map(itm => (\n              <Chip\n                sx={{ color: '#fff', cursor: 'pointer' }}\n                key={name + itm}\n                color=\"secondary\"\n                size=\"small\"\n                label={itm}\n              />\n            ))}\n          </Stack>\n        </Box>\n      </Button>\n    </motion.div>\n  );\n};\n","import { Button } from '@mui/material';\n\nexport const FilterButton = ({ text, selectedFilter, onTechBtnClick }) => {\n  return (\n    <Button\n      sx={{\n        borderRadius: 2,\n        px: 2,\n        color: '#fff',\n        backgroundColor: selectedFilter ? '#8bc34a' : '#484848',\n        '&': { transition: 'background-color 300ms' },\n        '&:hover': { backgroundColor: '#8bc34a' },\n      }}\n      onClick={() => onTechBtnClick(text)}\n    >\n      {text}\n    </Button>\n  );\n};\n","import { Stack, Switch, Typography } from '@mui/material';\nimport { projects } from 'data/projects';\nimport { FilterButton } from 'components/FilterButton/FilterButton';\n\nconst projList = [\n  ...new Set(\n    projects.reduce((acc, { tech }) => {\n      return [...acc, ...tech];\n    }, [])\n  ),\n];\n\nexport const FilterPanel = ({\n  selectedFilter,\n  setSelectedFilter,\n  identityToggler,\n  setIdentityToggler,\n}) => {\n  const onAllBtnClick = () => {\n    setSelectedFilter([]);\n  };\n\n  const onTechBtnClick = name => {\n    if (selectedFilter.includes(name)) {\n      setSelectedFilter(selectedFilter.filter(i => i !== name));\n      return;\n    }\n    setSelectedFilter([...selectedFilter, name]);\n  };\n\n  const onTogglerClickHandler = () => {\n    setIdentityToggler(!identityToggler);\n  };\n\n  return (\n    <Stack direction=\"row\" flexWrap=\"wrap\" gap={1} mb={10}>\n      <FilterButton\n        selectedFilter={selectedFilter.length === 0}\n        text=\"All\"\n        onClick={onAllBtnClick}\n      />\n      {projList.map(tech => (\n        <FilterButton\n          key={'filter' + tech}\n          selectedFilter={selectedFilter.some(i => i === tech)}\n          text={tech}\n          onTechBtnClick={onTechBtnClick}\n        />\n      ))}\n      <Stack direction=\"row\" alignItems=\"center\">\n        <Switch\n          defaultChecked={identityToggler}\n          onChange={onTogglerClickHandler}\n          sx={{\n            '& .MuiSwitch-switchBase': {\n              transitionDuration: '300ms',\n              '&.Mui-checked': {\n                color: '#fff',\n                '& + .MuiSwitch-track': {\n                  backgroundColor: '#8bc34a',\n                  opacity: 1,\n                  border: 0,\n                },\n              },\n              '&.Mui-focusVisible .MuiSwitch-thumb': {},\n            },\n            '& .MuiSwitch-thumb': {},\n            '& .MuiSwitch-track': {\n              backgroundColor: '#484848',\n              opacity: 1,\n            },\n          }}\n        />\n        <Typography>Exact match</Typography>\n      </Stack>\n    </Stack>\n  );\n};\n","import { useState, useEffect, useMemo } from 'react';\nimport { useSearchParams } from 'react-router-dom';\nimport { Container, Grid } from '@mui/material';\nimport { projects } from 'data/projects';\nimport { ProjectPoster } from 'components/ProjectPoster/ProjectPoster';\nimport { BackButton } from 'components/BackButton/BackButton';\nimport { FilterPanel } from 'components/FilterPanel/FilterPanel';\n\nconst Projects = () => {\n  const [searchParams, setSearchParams] = useSearchParams();\n  const filter = useMemo(\n    () =>\n      searchParams\n        .get('filter')\n        ?.split(',')\n        .filter(i => i !== '') ?? [],\n    [searchParams]\n  );\n  const toggler = useMemo(\n    () => (searchParams.get('exact') === 'true' ? true : false),\n    [searchParams]\n  );\n  const [selectedFilter, setSelectedFilter] = useState(filter);\n\n  const [filteredProjects, setFilteredProjects] = useState(projects);\n  const [identityToggler, setIdentityToggler] = useState(toggler);\n\n  useEffect(() => {\n    if (selectedFilter.length === 0) {\n      return setFilteredProjects(projects);\n    }\n    setFilteredProjects(\n      projects.filter(({ tech }) => {\n        if (!identityToggler) {\n          return selectedFilter.some(i => tech.includes(i));\n        } else {\n          return selectedFilter.every(i => tech.includes(i));\n        }\n      })\n    );\n  }, [selectedFilter, identityToggler]);\n\n  useEffect(() => {\n    const filterParams = selectedFilter.join(',');\n    setSearchParams({ filter: filterParams, exact: identityToggler });\n  }, [identityToggler, selectedFilter, setSearchParams]);\n\n  return (\n    <section>\n      <BackButton />\n      <Container sx={{ py: 10 }}>\n        <FilterPanel\n          selectedFilter={selectedFilter}\n          setSelectedFilter={setSelectedFilter}\n          identityToggler={identityToggler}\n          setIdentityToggler={setIdentityToggler}\n        />\n        <Grid container spacing={3}>\n          {filteredProjects.map(({ id, name, poster, tech }, idx) => (\n            <Grid\n              key={name}\n              item\n              xxs={12}\n              sm={idx % 3 === 0 ? 12 : 6}\n              md={idx % 10 === 0 || idx % 10 === 6 ? 8 : 4}\n              sx={{ height: '350px' }}\n            >\n              <ProjectPoster poster={poster} name={name} id={id} tech={tech} />\n            </Grid>\n          ))}\n        </Grid>\n      </Container>\n    </section>\n  );\n};\nexport default Projects;\n"],"names":["ProjectPoster","poster","name","id","tech","location","useLocation","motion","initial","opacity","whileInView","viewport","once","style","width","height","Button","component","Link","to","state","from","sx","position","backgroundImage","backgroundRepeat","backgroundSize","backgroundPosition","borderRadius","p","overflow","filter","transition","boxShadow","bottom","Box","right","display","flexDirection","backgroundColor","Typography","variant","Stack","direction","flexWrap","gap","map","itm","Chip","color","cursor","size","label","FilterButton","text","selectedFilter","onTechBtnClick","px","onClick","projList","Set","projects","acc","FilterPanel","setSelectedFilter","identityToggler","setIdentityToggler","includes","i","mb","length","some","alignItems","Switch","defaultChecked","onChange","transitionDuration","border","useSearchParams","searchParams","setSearchParams","useMemo","get","split","toggler","useState","filteredProjects","setFilteredProjects","useEffect","every","filterParams","join","exact","BackButton","Container","py","Grid","container","spacing","idx","item","xxs","sm","md"],"sourceRoot":""}